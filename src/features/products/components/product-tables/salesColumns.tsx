'use client';

import { Badge } from '@/components/ui/badge';
import { DataTableColumnHeader } from '@/components/ui/table/data-table-column-header';
import { ColumnDef } from '@tanstack/react-table';
import { BanknoteIcon, Calendar, Car, Filter, Text, User } from 'lucide-react';
import Image from 'next/image';
import { CellAction } from './cell-action';
import { format } from 'date-fns'; // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±—ã–ª–æ 'path'
import { ru } from 'date-fns/locale'; // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
import { SoldCar } from '@/types';
import {
  BRANDS,
  EMPLOYEES,
  formatFeature,
  formatFuelType,
  formatTransmission,
  FUEL_TYPES,
  getEmployeeName,
  getEmployeePhoto,
  TRANSMISSIONS
} from '@/constants/data';

export const SALE_TYPES = [
  { value: 'cash', label: '–ù–∞–ª–∏—á–Ω—ã–µ' },
  { value: 'credit', label: '–ö—Ä–µ–¥–∏—Ç' }
];

export const BANKS = [
  { value: 'bereke', label: '–ë–µ—Ä–µ–∫–µ –ë–∞–Ω–∫' },
  { value: 'kaspi', label: '–ö–∞—Å–ø–∏ –ë–∞–Ω–∫' },
  { value: 'halyk', label: '–•–∞–ª—ã–∫ –ë–∞–Ω–∫' }
];

export const COLORS = [
  { value: '–ß—ë—Ä–Ω—ã–π', label: '–ß—ë—Ä–Ω—ã–π' },
  { value: '–ë–µ–ª—ã–π', label: '–ë–µ–ª—ã–π' },
  { value: '–°–µ—Ä—ã–π', label: '–°–µ—Ä—ã–π' },
  { value: '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', label: '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π' },
  { value: '–°–∏–Ω–∏–π', label: '–°–∏–Ω–∏–π' },
  { value: '–ö—Ä–∞—Å–Ω—ã–π', label: '–ö—Ä–∞—Å–Ω—ã–π' },
  { value: '–ó–µ–ª—ë–Ω—ã–π', label: '–ó–µ–ª—ë–Ω—ã–π' },
  { value: '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π', label: '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π' },
  { value: '–û—Ä–∞–Ω–∂–µ–≤—ã–π', label: '–û—Ä–∞–Ω–∂–µ–≤—ã–π' }
];

export const soldCarColumns: ColumnDef<SoldCar>[] = [
  {
    accessorKey: 'imageUrl',
    header: () => <div className='text-center'>–§–æ—Ç–æ</div>,
    cell: ({ row }) => (
      <div className='relative mx-auto h-12 w-16'>
        <Image
          src={'https://cdn-icons-png.flaticon.com/512/6596/6596121.png'}
          alt={`${row.original.brand} ${row.original.model}`}
          fill
          className='rounded-md object-cover'
        />
      </div>
    ),
    enableSorting: false,
    enableColumnFilter: false,
    size: 80,
    meta: {
      label: '–§–æ—Ç–æ'
    }
  },
  {
    accessorKey: 'brand',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ú–∞—Ä–∫–∞' />
    ),
    cell: ({ row }) => <div className='font-medium'>{row.original.brand}</div>,
    meta: {
      label: '–ú–∞—Ä–∫–∞',
      variant: 'multiSelect',
      options: BRANDS,
      icon: Car
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 100
  },
  {
    accessorKey: 'model',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ú–æ–¥–µ–ª—å' />
    ),
    cell: ({ row }) => <div>{row.original.model}</div>,
    meta: {
      label: '–ú–æ–¥–µ–ª—å',
      variant: 'text',
      placeholder: '–ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏...',
      icon: Text
    },
    size: 120
  },
  {
    accessorKey: 'year',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ì–æ–¥' />
    ),
    cell: ({ row }) => <div>{row.original.year}</div>,
    meta: {
      label: '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞',
      variant: 'range',
      range: [2000, 2025],
      step: 1,
      icon: Calendar
    },
    filterFn: (row, id, filterValue: { from?: number; to?: number }) => {
      const year = row.getValue<number>(id);
      if (filterValue.from && year < filterValue.from) return false;
      if (filterValue.to && year > filterValue.to) return false;
      return true;
    },
    size: 80
  },
  {
    accessorKey: 'price',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–¶–µ–Ω–∞ (‚Ç∏)' />
    ),
    cell: ({ row }) => (
      <div className='font-medium'>
        {row.original.price.toLocaleString('ru-RU')} ‚Ç∏
      </div>
    ),
    meta: {
      label: '–¶–µ–Ω–∞',
      variant: 'range',
      range: [0, 50000000],
      step: 100000,
      unit: '‚Ç∏',
      icon: Text
    },
    filterFn: (row, id, filterValue: { from?: number; to?: number }) => {
      const price = row.getValue<number>(id);
      if (filterValue.from && price < filterValue.from) return false;
      if (filterValue.to && price > filterValue.to) return false;
      return true;
    },
    size: 130
  },
  {
    accessorKey: 'saleType',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏' />
    ),
    cell: ({ row }) => (
      <Badge
        variant={row.original.saleType === 'cash' ? 'default' : 'destructive'}
      >
        {row.original.saleType === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–ö—Ä–µ–¥–∏—Ç'}
      </Badge>
    ),
    meta: {
      label: '–¢–∏–ø –ø—Ä–æ–¥–∞–∂–∏',
      variant: 'multiSelect',
      options: SALE_TYPES,
      icon: Filter
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 120
  },
  {
    accessorKey: 'bankCredit',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ë–∞–Ω–∫' />
    ),
    cell: ({ row }) => (
      <Badge variant='outline'>
        {BANKS.find((b) => b.value === row.original.bankCredit)?.label ||
          row.original.bankCredit}
      </Badge>
    ),
    meta: {
      label: '–ë–∞–Ω–∫',
      variant: 'multiSelect',
      options: BANKS,
      icon: BanknoteIcon // üëà –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∏–∫–æ–Ω–∫–∏ Bank ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ User –∏–ª–∏ Filter
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 130
  },
  {
    accessorKey: 'mileage',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ü—Ä–æ–±–µ–≥ (–∫–º)' />
    ),
    cell: ({ row }) => (
      <div>{row.original.mileage.toLocaleString('ru-RU')}</div>
    ),
    meta: {
      label: '–ü—Ä–æ–±–µ–≥',
      variant: 'range',
      range: [0, 500000],
      step: 5000,
      icon: Car
    },
    filterFn: (row, id, filterValue: { from?: number; to?: number }) => {
      const mileage = row.getValue<number>(id);
      if (filterValue.from && mileage < filterValue.from) return false;
      if (filterValue.to && mileage > filterValue.to) return false;
      return true;
    },
    size: 120
  },
  {
    accessorKey: 'color',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–¶–≤–µ—Ç' />
    ),
    cell: ({ row }) => <Badge variant='secondary'>{row.original.color}</Badge>,
    meta: {
      label: '–¶–≤–µ—Ç',
      variant: 'multiSelect',
      options: COLORS,
      icon: Filter
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 100
  },
  {
    accessorKey: 'fuelType',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–¢–æ–ø–ª–∏–≤–æ' />
    ),
    cell: ({ row }) => (
      <Badge variant='secondary'>{formatFuelType(row.original.fuelType)}</Badge>
    ),
    meta: {
      label: '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞',
      variant: 'multiSelect',
      options: FUEL_TYPES,
      icon: Filter
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 100
  },
  {
    accessorKey: 'transmission',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ö–æ—Ä–æ–±–∫–∞' />
    ),
    cell: ({ row }) => (
      <Badge variant='outline'>
        {formatTransmission(row.original.transmission)}
      </Badge>
    ),
    meta: {
      label: '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á',
      variant: 'multiSelect',
      options: TRANSMISSIONS,
      icon: Filter
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 110
  },
  {
    accessorKey: 'bringEmployeeId',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ó–∞–≥–Ω–∞–ª' />
    ),
    cell: ({ row }) => (
      <div className='flex items-center gap-2'>
        <Image
          src={getEmployeePhoto(row.original.bringEmployeeId)}
          alt={getEmployeeName(row.original.bringEmployeeId)}
          width={24}
          height={24}
          className='rounded-full object-cover'
        />
        <span className='text-sm'>
          {getEmployeeName(row.original.bringEmployeeId)}
        </span>
      </div>
    ),
    meta: {
      label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–∑–∞–≥–Ω–∞–ª)',
      variant: 'multiSelect',
      options: EMPLOYEES,
      icon: User
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 140
  },
  {
    accessorKey: 'saleEmployeeId',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ü—Ä–æ–¥–∞–ª' />
    ),
    cell: ({ row }) => (
      <div className='flex items-center gap-2'>
        <Image
          src={getEmployeePhoto(row.original.saleEmployeeId)}
          alt={getEmployeeName(row.original.saleEmployeeId)}
          width={24}
          height={24}
          className='rounded-full object-cover'
        />
        <span className='text-sm'>
          {getEmployeeName(row.original.saleEmployeeId)}
        </span>
      </div>
    ),
    meta: {
      label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–ø—Ä–æ–¥–∞–ª)',
      variant: 'multiSelect',
      options: EMPLOYEES,
      icon: User
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 140
  },
  {
    accessorKey: 'marketgingEmployeeId',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' />
    ),
    cell: ({ row }) => (
      <div className='flex items-center gap-2'>
        <Image
          src={getEmployeePhoto(row.original.marketgingEmployeeId)}
          alt={getEmployeeName(row.original.marketgingEmployeeId)}
          width={24}
          height={24}
          className='rounded-full object-cover'
        />
        <span className='text-sm'>
          {getEmployeeName(row.original.marketgingEmployeeId)}
        </span>
      </div>
    ),
    meta: {
      label: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ (–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)',
      variant: 'multiSelect',
      options: EMPLOYEES,
      icon: User
    },
    filterFn: (row, id, value: string[]) => value.includes(row.getValue(id)),
    size: 140
  },
  {
    accessorKey: 'createdAt',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–î–æ–±–∞–≤–ª–µ–Ω–æ' />
    ),
    cell: ({ row }) => (
      <div className='text-muted-foreground text-sm'>
        {format(new Date(row.original.createdAt), 'dd MMM yyyy HH:mm', {
          locale: ru
        })}
      </div>
    ),
    meta: {
      label: '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è',
      variant: 'dateRange',
      icon: Calendar
    },
    filterFn: (row, id, filterValue: { from?: Date; to?: Date }) => {
      const date = new Date(row.getValue<string>(id));
      if (filterValue.from && date < filterValue.from) return false;
      if (filterValue.to && date > filterValue.to) return false;
      return true;
    },
    size: 150
  },
  {
    accessorKey: 'soldAt',
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title='–ü—Ä–æ–¥–∞–Ω–æ' />
    ),
    cell: ({ row }) => (
      <div className='text-sm font-medium'>
        {format(new Date(row.original.soldAt), 'dd MMM yyyy HH:mm', {
          locale: ru
        })}
      </div>
    ),
    meta: {
      label: '–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏',
      variant: 'dateRange',
      icon: Calendar
    },
    filterFn: (row, id, filterValue: { from?: Date; to?: Date }) => {
      const date = new Date(row.getValue<string>(id));
      if (filterValue.from && date < filterValue.from) return false;
      if (filterValue.to && date > filterValue.to) return false;
      return true;
    },
    size: 150
  },
  {
    accessorKey: 'features',
    header: '–û–ø—Ü–∏–∏',
    cell: ({ row }) => (
      <div className='flex flex-wrap gap-1'>
        {row.original.features.length > 0 ? (
          row.original.features.slice(0, 3).map((f, i) => (
            <Badge key={i} variant='outline' className='text-xs'>
              {formatFeature(f)}
            </Badge>
          ))
        ) : (
          <span className='text-muted-foreground text-xs'>‚Äî</span>
        )}
        {row.original.features.length > 3 && (
          <Badge variant='secondary' className='text-xs'>
            +{row.original.features.length - 3}
          </Badge>
        )}
      </div>
    ),
    enableSorting: false,
    enableColumnFilter: false,
    size: 200,
    meta: {
      label: '–û–ø—Ü–∏–∏'
    }
  },
  {
    accessorKey: 'description',
    header: '–û–ø–∏—Å–∞–Ω–∏–µ',
    cell: ({ row }) => (
      <div className='text-muted-foreground line-clamp-2 max-w-xs text-sm'>
        {row.original.description}
      </div>
    ),
    enableSorting: false,
    enableColumnFilter: false,
    size: 250,
    meta: {
      label: '–û–ø–∏—Å–∞–Ω–∏–µ'
    }
  },
  {
    id: 'actions',
    cell: ({ row }) => <CellAction data={row.original} />,
    size: 60,
    enableSorting: false,
    enableColumnFilter: false,
    meta: {
      label: '–î–µ–π—Å—Ç–≤–∏–µ'
    }
  }
];
